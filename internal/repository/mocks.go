// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -destination=../internal/repository/mocks.go -package=repository -source=../internal/repository/interface.go
//
// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	user "tgbot/internal/entity/user"
	transaction "tgbot/internal/transaction"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockBday is a mock of Bday interface.
type MockBday struct {
	ctrl     *gomock.Controller
	recorder *MockBdayMockRecorder
}

// MockBdayMockRecorder is the mock recorder for MockBday.
type MockBdayMockRecorder struct {
	mock *MockBday
}

// NewMockBday creates a new mock instance.
func NewMockBday(ctrl *gomock.Controller) *MockBday {
	mock := &MockBday{ctrl: ctrl}
	mock.recorder = &MockBdayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBday) EXPECT() *MockBdayMockRecorder {
	return m.recorder
}

// FindAllBdayPeople mocks base method.
func (m *MockBday) FindAllBdayPeople(ts transaction.Session, sundayTime, lastWeekTime time.Time) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBdayPeople", ts, sundayTime, lastWeekTime)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBdayPeople indicates an expected call of FindAllBdayPeople.
func (mr *MockBdayMockRecorder) FindAllBdayPeople(ts, sundayTime, lastWeekTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBdayPeople", reflect.TypeOf((*MockBday)(nil).FindAllBdayPeople), ts, sundayTime, lastWeekTime)
}

// UpdateBday mocks base method.
func (m *MockBday) UpdateBday(ts transaction.Session, id int, newBdayTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBday", ts, id, newBdayTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBday indicates an expected call of UpdateBday.
func (mr *MockBdayMockRecorder) UpdateBday(ts, id, newBdayTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBday", reflect.TypeOf((*MockBday)(nil).UpdateBday), ts, id, newBdayTime)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// SaveLog mocks base method.
func (m *MockLogger) SaveLog(ts transaction.Session, logtext string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLog", ts, logtext)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockLoggerMockRecorder) SaveLog(ts, logtext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockLogger)(nil).SaveLog), ts, logtext)
}
